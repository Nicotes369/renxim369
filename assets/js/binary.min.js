// assets/js/binary.min.js

// Configurable settings
const binarySettings = {
    colors: ['#00bfff', '#ffffff'], // Blue and White neon colors
    matrixColor: '#00ff00', // Green color for qc.json binary text
    animationDurations: [2, 5], // Seconds
    fontSizes: [10, 30], // px
    spawnInterval: 50 // ms
};

// Function to create binary rain effect
function startBinaryEffect() {
    const binaryContainer = document.getElementById('binary-container') || document.createElement('div');
    binaryContainer.id = 'binary-container';
    binaryContainer.style.position = 'fixed';
    binaryContainer.style.top = '0';
    binaryContainer.style.left = '0';
    binaryContainer.style.width = '100%';
    binaryContainer.style.height = '100%';
    binaryContainer.style.pointerEvents = 'none';
    binaryContainer.style.zIndex = '100';
    document.body.appendChild(binaryContainer);

    const createBinaryDrop = () => {
        const binaryDrop = document.createElement('div');
        const isMatrixText = Math.random() < 0.1; // 10% chance for Matrix green text
        binaryDrop.innerText = Math.random() < 0.5 ? '0' : '1';
        binaryDrop.classList.add(isMatrixText ? 'matrix-text' : `binary-${binarySettings.colors.includes('#ffffff') ? 'white' : 'blue'}`);
        binaryDrop.style.left = `${Math.random() * 100}%`;
        binaryDrop.style.fontSize = `${Math.random() * (binarySettings.fontSizes[1] - binarySettings.fontSizes[0]) + binarySettings.fontSizes[0]}px`;
        binaryDrop.style.opacity = Math.random();
        binaryDrop.style.transform = `translateY(-100px)`;
        const duration = Math.random() * (binarySettings.animationDurations[1] - binarySettings.animationDurations[0]) + binarySettings.animationDurations[0];
        binaryDrop.style.animation = `fall ${duration}s linear forwards`;

        binaryContainer.appendChild(binaryDrop);

        // Remove after animation duration
        setTimeout(() => {
            binaryDrop.remove();
        }, duration * 1000);
    };

    // Create binary drops at intervals
    const binaryInterval = setInterval(createBinaryDrop, binarySettings.spawnInterval);
    window.binaryInterval = binaryInterval;
}

// Function to create Matrix-style green text flowing from right to left
function startMatrixEffect() {
    const matrixContainer = document.getElementById('matrix-container') || document.createElement('div');
    matrixContainer.id = 'matrix-container';
    matrixContainer.style.position = 'fixed';
    matrixContainer.style.top = '0';
    matrixContainer.style.right = '0';
    matrixContainer.style.width = '100%';
    matrixContainer.style.height = '100%';
    matrixContainer.style.pointerEvents = 'none';
    matrixContainer.style.zIndex = '200';
    document.body.appendChild(matrixContainer);

    const createMatrixDrop = () => {
        const matrixDrop = document.createElement('div');
        matrixDrop.innerText = Math.random() < 0.5 ? '0' : '1';
        matrixDrop.classList.add('matrix-text');
        matrixDrop.style.top = `${Math.random() * 100}%`;
        matrixDrop.style.fontSize = `${Math.random() * 20 + 10}px`;
        matrixDrop.style.opacity = Math.random();
        matrixDrop.style.transform = `translateX(100%)`;
        const duration = Math.random() * 3 + 2;
        matrixDrop.style.animation = `matrix-fall ${duration}s linear forwards`;

        matrixContainer.appendChild(matrixDrop);

        // Remove after animation duration
        setTimeout(() => {
            matrixDrop.remove();
        }, duration * 1000);
    };

    // Create Matrix drops at intervals
    const matrixInterval = setInterval(createMatrixDrop, 100);
    window.matrixInterval = matrixInterval;
}

// Initialize both effects
function initializeBinaryAnimation() {
    startBinaryEffect();
    startMatrixEffect();
}

// Function to stop binary rain effect
function stopBinaryEffect() {
    const binaryContainer = document.getElementById('binary-container');
    if (binaryContainer) {
        binaryContainer.remove();
    }
    const matrixContainer = document.getElementById('matrix-container');
    if (matrixContainer) {
        matrixContainer.remove();
    }
    if (window.binaryInterval) {
        clearInterval(window.binaryInterval);
        window.binaryInterval = null;
    }
    if (window.matrixInterval) {
        clearInterval(window.matrixInterval);
        window.matrixInterval = null;
    }
}

// Start binary effect when quantum mode is activated
document.addEventListener('DOMContentLoaded', () => {
    if (document.body.classList.contains('quantum-mode')) {
        initializeBinaryAnimation();
    }
});

// Listen for changes in quantum mode
const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
            if (document.body.classList.contains('quantum-mode')) {
                initializeBinaryAnimation();
            } else {
                stopBinaryEffect();
            }
        }
    });
});

observer.observe(document.body, { attributes: true });
