// assets/js/language.min.js

const languageSelect = document.getElementById('language-select');

// Language Notifications
const languageNotifications = {
    en: "Language changed to English",
    ja: "言語が日本語に変更されました",
    zh: "语言已更改为中文",
    hi: "भाषा हिंदी में बदल गई है",
    fa: "زبان به فارسی تغییر یافت",
    ar: "تم تغيير اللغة إلى العربية",
    he: "השפה שונתה לעברית",
    ru: "Язык изменен на русский",
    de: "Sprache wurde auf Deutsch geändert",
    it: "Lingua cambiata in Italiano",
    es: "Idioma cambiado a Español",
    ko: "언어가 한국어로 변경되었습니다",
    qc: "Quantum Computer Mode Activated"
};

// Function to create and show notification
function createNotification(message, bgColor = 'var(--notification-bg)') {
    const notification = document.createElement('div');
    notification.innerText = message;
    notification.style.position = 'fixed';
    notification.style.bottom = '20px';
    notification.style.right = '20px';
    notification.style.padding = '10px 20px';
    notification.style.backgroundColor = bgColor;
    notification.style.color = '#ffffff';
    notification.style.borderRadius = '5px';
    notification.style.boxShadow = '0px 0px 10px rgba(0, 0, 0, 0.5)';
    notification.style.zIndex = '1000';
    notification.style.fontSize = '1rem';
    notification.style.opacity = '0.9';
    document.body.appendChild(notification);

    setTimeout(() => {
        notification.remove();
    }, 2000);
}

// Function to show language change notification
function showLanguageChangeNotification(lang) {
    const message = languageNotifications[lang] || "Language changed";
    createNotification(message, 'var(--notification-bg)');
}

// Function to load language JSON
function loadLanguage(lang) {
    if (lang === 'qc') {
        fetch(`assets/languages/qc.json`)
            .then(response => response.json())
            .then(data => {
                const qcText = document.getElementById('qc-text');
                qcText.innerText = Object.values(data).join('\n');
                // Hide main content
                document.getElementById('main-content').style.display = 'none';
                // Show quantum content
                document.getElementById('quantum-content').style.display = 'block';
            })
            .catch(error => {
                console.error(`Error loading language file: ${lang}.json`, error);
            });
    } else {
        fetch(`assets/languages/${lang}.json`)
            .then(response => response.json())
            .then(data => {
                document.querySelectorAll('[data-i18n]').forEach(element => {
                    const key = element.getAttribute('data-i18n');
                    if (data[key]) {
                        element.innerHTML = data[key];
                    }
                });
                setDirection(lang);
                // Show main content
                document.getElementById('main-content').style.display = 'block';
                // Hide quantum content
                document.getElementById('quantum-content').style.display = 'none';
            })
            .catch(error => {
                console.error(`Error loading language file: ${lang}.json`, error);
            });
    }
}

// Function to set text direction based on language
function setDirection(lang) {
    const rtlLanguages = ['ar', 'he'];
    if (rtlLanguages.includes(lang)) {
        document.documentElement.setAttribute('dir', 'rtl');
    } else {
        document.documentElement.setAttribute('dir', 'ltr');
    }
}

// Event Listener for Language Selection
languageSelect.addEventListener('change', function() {
    const selectedLanguage = this.value;
    if (selectedLanguage === 'qc') {
        document.body.classList.add('quantum-mode');
    } else {
        document.body.classList.remove('quantum-mode');
    }
    loadLanguage(selectedLanguage);
    showLanguageChangeNotification(selectedLanguage);
});

// Initialize with default language
document.addEventListener('DOMContentLoaded', () => {
    loadLanguage(languageSelect.value);
});
